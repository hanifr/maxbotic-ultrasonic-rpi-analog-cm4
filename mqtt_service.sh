# ===== mqtt_service.sh =====
#!/bin/bash

# MQTT Configuration Variables
# Note: Update these values according to your setup

# MQTT Broker Configuration
export MQTT_BROKER="${MQTT_BROKER:-zr.txio.live}"
export MQTT_PORT="${MQTT_PORT:-1880}"  # Keep your custom port
export MQTT_TOPIC="${MQTT_TOPIC:-dtonggang/ultrasonic-01}"

# Fixed Client ID - Short and compliant with MQTT 3.1 (max 23 chars)
# Generate a short, unique client ID
HOSTNAME_SHORT=$(hostname | cut -c1-6)  # First 6 chars of hostname
RANDOM_SUFFIX=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 4)
export MQTT_CLIENT_ID="${MQTT_CLIENT_ID:-us-${HOSTNAME_SHORT}-${RANDOM_SUFFIX}}"

# Alternative static options (uncomment one if needed):
# export MQTT_CLIENT_ID="ultrasonic01"           # Simple static ID
# export MQTT_CLIENT_ID="sensor-$(date +%s | tail -c 6)"  # With timestamp
# export MQTT_CLIENT_ID=""  # Empty = auto-generated by broker

# Optional MQTT Authentication (uncomment and set if needed)
# export MQTT_USERNAME="your_username"
# export MQTT_PASSWORD="your_password"

# MQTT Quality of Service (0=at most once, 1=at least once, 2=exactly once)
# Changed from 2 to 1 for better compatibility
export MQTT_QOS="${MQTT_QOS:-1}"

# Sensor Configuration
export SENSOR_DIR="${SENSOR_DIR:-/sys/bus/iio/devices/iio:device0}"
export OUTPUT_FILE="${OUTPUT_FILE:-/home/pi/ultrasonic.txt}"
export MEASUREMENT_INTERVAL="${MEASUREMENT_INTERVAL:-2}"

# Logging
log_mqtt_info() {
    echo "[MQTT-INFO] $1"
}

# Enhanced validation function
validate_mqtt_config() {
    if [[ -z "$MQTT_BROKER" ]]; then
        echo "[MQTT-ERROR] MQTT_BROKER not configured"
        return 1
    fi
    
    if [[ ! "$MQTT_PORT" =~ ^[0-9]+$ ]] || [[ "$MQTT_PORT" -lt 1 ]] || [[ "$MQTT_PORT" -gt 65535 ]]; then
        echo "[MQTT-ERROR] Invalid MQTT_PORT: $MQTT_PORT"
        return 1
    fi
    
    # Validate Client ID length and format
    if [[ -n "$MQTT_CLIENT_ID" ]]; then
        CLIENT_ID_LENGTH=${#MQTT_CLIENT_ID}
        if [[ $CLIENT_ID_LENGTH -gt 23 ]]; then
            echo "[MQTT-ERROR] Client ID too long ($CLIENT_ID_LENGTH chars): $MQTT_CLIENT_ID"
            echo "[MQTT-ERROR] MQTT 3.1 limit is 23 characters"
            return 1
        fi
        
        # Check for invalid characters (only allow alphanumeric, hyphen, underscore)
        if [[ ! "$MQTT_CLIENT_ID" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "[MQTT-ERROR] Client ID contains invalid characters: $MQTT_CLIENT_ID"
            echo "[MQTT-ERROR] Only letters, numbers, hyphens, and underscores allowed"
            return 1
        fi
    fi
    
    # Validate QoS
    if [[ ! "$MQTT_QOS" =~ ^[0-2]$ ]]; then
        echo "[MQTT-ERROR] Invalid MQTT_QOS: $MQTT_QOS (must be 0, 1, or 2)"
        return 1
    fi
    
    log_mqtt_info "MQTT configuration validated successfully"
    log_mqtt_info "Broker: $MQTT_BROKER:$MQTT_PORT"
    log_mqtt_info "Topic: $MQTT_TOPIC"
    log_mqtt_info "Client ID: $MQTT_CLIENT_ID (${#MQTT_CLIENT_ID} chars)"
    log_mqtt_info "QoS: $MQTT_QOS"
    
    return 0
}

# Enhanced MQTT connection test
test_mqtt_connection() {
    log_mqtt_info "Testing MQTT connection..."
    
    # Build mosquitto_pub command
    local mqtt_cmd="mosquitto_pub -h $MQTT_BROKER -p $MQTT_PORT -t $MQTT_TOPIC/test -q $MQTT_QOS -m connection_test"
    
    # Add client ID if specified
    if [[ -n "$MQTT_CLIENT_ID" ]]; then
        mqtt_cmd="$mqtt_cmd -i $MQTT_CLIENT_ID"
    fi
    
    # Add authentication if configured
    if [[ -n "$MQTT_USERNAME" ]]; then
        mqtt_cmd="$mqtt_cmd -u $MQTT_USERNAME"
        if [[ -n "$MQTT_PASSWORD" ]]; then
            mqtt_cmd="$mqtt_cmd -P $MQTT_PASSWORD"
        fi
    fi
    
    log_mqtt_info "Testing with command: $mqtt_cmd"
    
    if timeout 5 eval "$mqtt_cmd" 2>/dev/null; then
        log_mqtt_info "MQTT connection test successful"
        return 0
    else
        echo "[MQTT-ERROR] MQTT connection test failed"
        echo "[MQTT-ERROR] Check broker connectivity, credentials, and client ID format"
        return 1
    fi
}

# Function to generate a new client ID if current one fails
generate_new_client_id() {
    local timestamp=$(date +%s | tail -c 6)
    local random_id=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 4)
    echo "us-${timestamp}-${random_id}"
}

# Auto-fix function for client ID issues
fix_client_id() {
    log_mqtt_info "Attempting to fix client ID issues..."
    
    # Try different client ID strategies
    local test_ids=(
        "$(generate_new_client_id)"
        "ultrasonic01"
        "sensor$(date +%s | tail -c 6)"
        ""  # Auto-generated
    )
    
    for test_id in "${test_ids[@]}"; do
        export MQTT_CLIENT_ID="$test_id"
        if [[ -z "$test_id" ]]; then
            log_mqtt_info "Testing auto-generated client ID..."
        else
            log_mqtt_info "Testing client ID: $test_id"
        fi
        
        if test_mqtt_connection; then
            log_mqtt_info "Found working client ID: ${MQTT_CLIENT_ID:-auto-generated}"
            return 0
        fi
    done
    
    echo "[MQTT-ERROR] No working client ID found"
    return 1
}